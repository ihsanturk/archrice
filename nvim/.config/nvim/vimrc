"=== SETTING ==="
let mapleader = '\'
syntax on
set timeout
set ttimeout
set hlsearch
set incsearch
set smartcase
set tabstop=4
set noswapfile
set ignorecase
set shiftwidth=4
set ttimeoutlen=10
set timeoutlen=1000
scriptencoding utf-8
filetype plugin indent on
let g:netrw_dirhistmax = 0

setglobal fileencoding=utf-8

"=== DESIGN ==="
set number
set cursorline
colorscheme delek
hi LineNr ctermfg=238
autocmd InsertEnter,InsertLeave * set cul!

hi Search term=reverse ctermfg=0
hi cursorline cterm=NONE ctermbg=237
hi CursorLineNr cterm=bold ctermfg=6 ctermbg=237
hi Pmenu ctermfg=7 ctermbg=239
hi PmenuBar ctermfg=65 ctermbg=220
hi PmenuSel ctermfg=11 ctermbg=237 cterm=bold
hi User1 ctermfg=65 ctermbg=237 cterm=none
hi User2 ctermfg=3  ctermbg=238 cterm=none
hi User3 ctermfg=9  ctermbg=236 cterm=bold
hi User4 ctermfg=6  ctermbg=238 cterm=bold
hi User5 ctermfg=7  ctermbg=239 cterm=none
hi User6 ctermfg=11 ctermbg=237 cterm=none
hi StatusLine ctermfg=14 ctermbg=234 cterm=bold
hi VertSplit ctermfg=14 ctermbg=236 cterm=bold
hi StatusLineNC ctermfg=240 ctermbg=236 guibg=#000000 guifg=#000000
hi StatusLineTerm ctermfg=233 ctermbg=14
hi StatusLineTermNC term=none ctermfg=240 ctermbg=236
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\e[6 q\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\e[4 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
	let &t_SI = "\e[6 q"
	let &t_SR = "\e[4 q"
	let &t_EI = "\e[2 q"
endif

"=== STATUS LINE ==="
set laststatus=2
set statusline=
set statusline+=%1*\ %n                                "1 BufferNumber
set statusline+=\ %0*\ %f                              "0 FilePath
set statusline+=\ %2*\ %c                              "2 ColumnNumber
set statusline+=\ %3*%m%r%w%0*%=                       "3 ReadOnly?
set statusline+=\ %4*\ %y                              "4 FileType
set statusline+=\ %5*\ %{''.(&fenc!=''?&fenc:&enc).''} "5 Encoding
set statusline+=\ %6*\ %P\                             "6 Top/bot.

"=== EXPAND CURLY BRACES ==="
autocmd FileType c,cpp imap {} {<Return><Return>}<esc>kS

"=== GO INSIDE PARANTHESIS ==="
nmap <leader>i /)<Return>:noh<CR>i

"=== JUMP TO LAST POSITION ==="
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"zz
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

"=== NERDTREE ==="
let NERDTreeStatusline=" NerdTree"

"=== GLOBAL COPY ==="
if has('unnamedplus')
	set clipboard=unnamed,unnamedplus
endif

"=== PERSISTENT UNDO ==="
if has('persistent_undo')
  set undofile
  set undodir=~/.cache/vim
endif

"=== DELETE WITHOUT CUT ==="
nmap <leader>d "_d

"=== DELETE SPACES END OF LINES ==="
augroup fmt
	autocmd!
	autocmd BufWritePost,FileWritePost * %s/\s\+$//e
augroup END

"=== SHORTCUT ==="
nmap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
nmap <leader>n :NERDTreeToggle<CR><C-w>=
nmap z zz
nmap n nzz
nmap N Nzz
nmap <Tab> :bn<CR>
nmap <S-Tab> :bp<CR>
nmap <esc><esc> :noh<CR>
nmap <leader>r :so ~/.config/nvim/vimrc<CR>
tno <Esc> <C-\><C-n>

map q: :q
cnorea W w
cnorea Q q
cnorea qw wq
cnorea Wq wq
cnorea Q! q!

"=== COMMENT ==="
"vim
autocmd FileType vim nmap <leader>c mx:s/^\(\s*\)/\1"/g<CR>`xl:noh<CR>
autocmd FileType vim nmap <leader>u mx:s/^\(\s*\)"/\1/g<CR>`xh:noh<CR>
autocmd FileType vim vmap <leader>c mx:s/^\(\s*\)/\1"/g<CR>`xl:noh<CR>
autocmd FileType vim vmap <leader>u mx:s/^\(\s*\)"/\1/g<CR>`xh:noh<CR>

"make,python,sh (line, multiline)
autocmd FileType tmux,make,python,sh nmap <leader>c mx:s/^\(\s*\)/\1#/g<CR>`xl:noh<CR>
autocmd FileType tmux,make,python,sh nmap <leader>u mx:s/^\(\s*\)#/\1/g<CR>`xh:noh<CR>
autocmd FileType tmux,make,python,sh vmap <leader>c mx:s/^\(\s*\)/\1#/g<CR>`xl:noh<CR>
autocmd FileType tmux,make,python,sh vmap <leader>u mx:s/^\(\s*\)#/\1/g<CR>`xh:noh<CR>

"c,cpp (line, multiline)
autocmd FileType c,cpp nmap <leader>c mxA */<esc>I/* <esc>`x3l:noh<CR>
autocmd FileType c,cpp nmap <leader>u :s/\/\* //g<CR>:s/ \*\///g<CR>:noh<CR>
autocmd FileType c,cpp vmap <leader>c <esc>`>a */<esc>`<i/*<esc>`>:noh<CR>
autocmd FileType c,cpp vmap <leader>u :s/\/\*//g<CR>gv:s/ \*\///g<CR>:noh<CR>

