#include <vulkan/vulkan.h>
#include <GLFW/glfw3.h>
#include <iostream>

static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
  if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
	glfwSetWindowShouldClose(window, GLFW_TRUE);
}

int
main()
{
  if (!glfwInit()) {
	std::cout << "Initialization failed!" << std::endl;
	return 2;
  }

  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);

  if (glfwVulkanSupported()) {
	std::cout << "Vulkan is available, at least for compute" << std::endl;
  } else {
	std::cout << "Vulkan is not available" << std::endl;
  }

  uint32_t glfwExtensionCount = 0;
  const char** glfwExtensions;

  glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);

  VkInstance instance;
  VkApplicationInfo appInfo = {};
  appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
  appInfo.pApplicationName = "Hello Vulkan";
  appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
  appInfo.pEngineName = "No Engine";
  appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
  appInfo.apiVersion = VK_API_VERSION_1_0;

  VkInstanceCreateInfo createInfo = {};
  createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
  createInfo.pApplicationInfo = &appInfo;

  std::cout << glfwExtensionCount << std::endl;

  createInfo.enabledExtensionCount = glfwExtensionCount;
  createInfo.enabledExtensionNames = glfwExtensions;

  createInfo.enabledLayerCount = 0;

  if (vkCreateInstance(&createInfo, nullptr, &instance) != VK_SUCCESS) {
	throw std::runtime_error("failed! to create instance!");
  }

  GLFWwindow* window = glfwCreateWindow(800, 600, "First Vulkan Window", nullptr, nullptr);
  if(!window) {
	std::cout << "Window or OpenGL context creation failed!" << std::endl;
  }

  glfwSetKeyCallback(window, key_callback);

  VkSurfaceKHR surface;
  VkResult err = glfwCreateWindowSurface(instance, window, nullptr, &surface);
  if (err) {
	std::cout << "Window surface creation failed!" << std::endl;
  }

  while(!glfwWindowShouldClose(window)) {
	/* Keep going */
	glfwSwapBuffers(window);
	glfwPollEvents();
  }

  vkDestroySurfaceKHR(instance, surface, nullptr);
  glfwTerminate();
}
  
