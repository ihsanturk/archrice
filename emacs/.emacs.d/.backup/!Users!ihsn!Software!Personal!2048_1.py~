#!/usr/local/bin/python3
import curses
import random
import time
import os

def center(message, length):
    return (int(length / 2) - int(len(message) / 2))

class Cell:
    Row = 0
    Col = 0

    def __init__(self, row, column, sizeRow, sizeCol):
        Row = row
        Col = column

    def upValue(self):
        if Row > 0:
            return Row - 1
        else:
            return None
    def leftValue(self):
        if Col > 0:
            return Col - 1
        else:
            return None
    def downValue(self):
        if Row < sizeRow - 1:
            return Row - 1
        else:
            return None
    def rightValue(self):
        if Col < sizeCol - 1:
            return Col - 1
        else:
            return None
    
    
class Game2048:
    col = 4
    row = 4
    score = 0
    isWon = False
    isFail = False
    destination = 2048

    board = []
    emptyChar = 0

    def __init__(self, column, row_):
        self.col = column
        self.row = row_


    def findEmptyCells(self):
        emptyCells = []
        for r in range(0, self.row):
            for c in range(0, self.col):
                if self.board[r][c] == self.emptyChar:
                    emptyCells.append([r, c])
        return emptyCells


    def moveCell(self, r, c):
        b = self.board
        currentCell = b[1][0]
        if upOfCell(row, col) == self.emptyChar:
            b[row - 1][col] = currentCell
            b[row][col] = self.emptyChar

    # Example Scenario
    #                    Push to edge     Combine
    #   [ ][ ][ ][ ]  >  [ ][2][ ][ ]  >  [ ][4][ ][ ]
    #   [ ][2][ ][ ]  >  [ ][2][ ][ ]  >  [ ][ ][ ][ ]
    #   [ ][2][ ][ ]  >  [ ][ ][ ][ ]  >  [ ][ ][ ][ ]
    #   [ ][ ][ ][ ]  >  [ ][ ][ ][ ]  >  [ ][ ][ ][ ]


    def moveBoard(self):
        pass


    def appendNewCell(self):
        emptyCells = self.findEmptyCells()
        if len(emptyCells) == 0:
            isFail = True
            print(f"Game Over! Score: {self.score}")
        else:
            choice = random.choice(emptyCells)
            choiceRow = choice[0]
            choiceCol = choice[1]

            self.board[choiceRow][choiceCol] = random.choice([2, 4])

    def scroll(self, direction):
        if direction == "UP":
            isBoardMoved = self.moveBoard()

            if isBoardMoved != False:
                appendNewCell()
                        
    def displayGame(self):
        for row in self.board:
            print(row)
        
    def startBoard(self):
        initRandomValue = random.choice([2, 4])
        initRow = random.randint(0, self.row - 1)
        initCol = random.randint(0, self.col - 1)
        for r in range(self.row):
            self.board.append(list())
            for c in range(self.col):
                if r == initRow and c == initCol:
                    self.board[r].append(initRandomValue)
                else:
                    self.board[r].append(self.emptyChar)
        self.displayGame()

    def startGame(self):
        ans = "0"
        while ans != "q":
            os.system('clear')
            self.displayGame()
            ans = input("\nMove: ")

            if ans == "w":
                self.scroll("UP")
            elif ans == "a":
                self.scroll("LEFT")
            elif ans == "s":
                self.scroll("DOWN")
            elif ans == "d":
                self.scroll("RIGHT")
    
    def createNewGame(self):
        self.startBoard()
        # self.startGame()


if __name__ == '__main__':
    app = Game2048(4, 4)
    app.createNewGame()
