* Use-Package Updates
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-compile
  :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
* Custom Emacs Settings
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq backup-directory-alist `(("." . "~/.emacs.d/.backup")))

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "")
  (defun display-startup-echo-area-message ()
    (message ""))
  (setq default-frame-alist
      '((width . 80)
        (font . "Hack-12")))
      
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (scroll-bar-mode 0)
  (show-paren-mode 1)
  (save-place-mode 1)
  (global-linum-mode 0)
  (blink-cursor-mode 0)
  (column-number-mode 1)
  (global-hl-line-mode 1)

  (setq c-set-style 'awk)
  (setq-default cursor-type 'bar)
  (set-window-scroll-bars (minibuffer-window) nil nil)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-margin 5
    scroll-conservatively 0
    scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)
  (setq-default scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)



  ;; Dired
  (setq dired-listing-switches "-alh")
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
* UI Look
** All-The-Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
  :ensure t
  :hook (all-the-icons-install-fonts))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
  :config
    (load-theme 'gruvbox-dark-medium t))
#+END_SRC
** Mode-Line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-height 20))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-default-font "Hack-18")
#+END_SRC
* Packages
** Undo-Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :config
    (global-undo-tree-mode 1))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t
  :config
    (which-key-mode))
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
  :config
    (evil-mode 1))
#+END_SRC

** Evil-Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
  :config
    (global-evil-surround-mode 1))
#+END_SRC

** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Counsel, swiper, flx smex, ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
  :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)
  :config
    (use-package flx)
    (use-package smex)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
    (t . ivy--regex-fuzzy))))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :ensure t
  :commands
    (markdown-mode gfm-mode)
  :mode
    (("README\\.md\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
  :init
    (setq markdown-command "multimarkdown"))
#+END_SRC
** Company{,-jedi}
Side note: Check this page for jedi with python3 issues:
https://archive.zhimingwang.org/blog/2015-04-26-using-python-3-with-emacs-jedi.html
#+BEGIN_SRC emacs-lisp
  (use-package company
  :config
    (defun company-semantic-setup ()
    "Configure company-backends for company-semantic and company-yasnippet."
    (delete 'company-irony company-backends)
    (push '(company-semantic :with company-yasnippet) company-backends))
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-backends (delete 'company-semantic company-backends))

    (require 'cc-mode)
    (define-key c-mode-map  [(tab)] 'company-complete)
    (define-key c++-mode-map  [(tab)] 'company-complete))

  (use-package company-jedi
    :config
    (setq jedi:environment-root "jedi")
    (defun company-jedi-setup ()
    	(add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'company-jedi-setup)
    (add-hook 'python-mode-hook 'jedi:install-server)

    (setq jedi:setup-keys t)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:setup))
#+END_SRC

** Neo-Tree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
  :config
    (require 'neotree)
    (global-set-key (kbd "M-n") 'neotree-toggle)
    (add-hook 'neotree-mode-hook
         (lambda ()
           (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
           (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
           (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
           (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
           (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
           (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
           (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
           (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
           (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :bind
    ("C-x g" . magit-status)

  :config
    (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    (with-eval-after-load 'magit-remote
      (magit-define-popup-action 'magit-push-popup ?P
      'magit-push-implicity--desc
      'magit-push-implicty ?p t))
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC
** Csv-mode
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
** Js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
  :mode
    ("\\.js\\'" . js2-mode))
#+END_SRC
** Fill-Column-Indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
  :config
    (add-hook 'prog-mode-hook #'fci-mode)
    (setq fci-rule-column 79)
    (setq fci-rule-color "gray22"))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
  )
#+END_SRC
* Custom Keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-r") 'counsel-recentf)
  (define-key evil-normal-state-map (kbd "SPC") 'evil-toggle-fold)
#+END_SRC
* Org-Babel Languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages '((python . t)))
#+END_SRC



* *FORSAKEN*
** Pdf-Tools
#+BEGIN_SRC emacs-lisp
  ;; (use-package pdf-tools
  ;; :config
  ;; (pdf-tools-install)
  ;; (pdf-loader-install))
  ;; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
#+END_SRC
** Hide-Show Folding Blocks
#+BEGIN_SRC emacs-lisp
;; (defun fold-def-all ()
;;   (hs-minor-mode 1)
;;   (interactive)
;;   (goto-char 1)
;;   (while (re-search-forward "^\s*def\s" nil t)
;;     (hs-hide-block)))
;;
;; (defun folding-blocks ()
;;   (hs-minor-mode 1)
;;   (local-set-key (kbd "C--") 'hs-hide-block)
;;   (local-set-key (kbd "C-=") 'hs-show-block))
;;
;; (add-hook 'python-mode-hook 'folding-blocks)
;; (add-hook 'js-mode-hook 'folding-blocks)
#+END_SRC
** Python-mode
#+BEGIN_SRC emacs-lisp
;; (use-package python-mode
;; :config
;; (setq py-python-command "python3"))
#+END_SRC
