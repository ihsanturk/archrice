#!/bin/sh

# =========================================================================== #
# File:        todo                                                           #
# Description: View or alter todo items.                                      #
# Author:      ihsan <ihsanl at pm dot me>                                    #
# Created At:  1585439292                                                     #
# License:     MIT License                                                    #
# =========================================================================== #

# jq notes {{{1

# Merge two json files: [https://stackoverflow.com/a/16835501/12536010]
# Update single value : [https://stackoverflow.com/a/31037640/12536010]
# Add a new element JSON array: [https://stackoverflow.com/a/42248841/12536010]

# }}}
# ASCII Art {{{1

                     #=======================================#
                    #======      ==   ===   ===   ==========/|
                   #========= ==== == == == == == =========/#|
                  #========= =====   ==   ====   =========/##|
                 #========================================###|
                 #                                       |###|
                 # DONE 1585440860: Filter the first     |###|
                 #                  work-in-progress     |###|
                 #                  todo item if no      |###|
                 #                  args given.          |###|
                 #                                       |###|
                 # DONE 1585440924: Decide how to select |###|
                 #                  which todo item      |###|
                 #                  while updateing.     |###|
                 #                  Index or search      |###|
                 #                  through the text     |###|
                 #                  values?              |###|
                 #                                       |###|
                 # DONE 1585441225: Update the json      |##/...
                 #                  values using jq.     |#/........
                 #                                       |/........
                 #========================================........
                 # ..............................................
                 #  ............................................

# }}}
# Vars {{{1

file_bak=$HOME/.cache/todo.bak
file_tmp_bak=$(mktemp $TMPDIR/$(uuidgen).json)
file_tmp_new=$(mktemp $TMPDIR/$(uuidgen).json)
file_data=$HOME/.cache/todo.json
json_template='[ { "type": "%s", "text": "%s", "time": { "created": { "format": "timestamp", "value": "%s" }, "finished": { "format": "timestamp", "value": "" } } } ]'
message_usage='[ -Cdhlnoprtuw ] [ -a <todo> ] [ -i <index> ]'
usage() { >&2 echo "usage: `basename $0` $message_usage"; }
. $HOME/.config/todo/todo.sh
if ! [ -s $file_data ]; then echo '[]' >> $file_data; fi

# }}}
# Getopts {{{1

index=-1
list=false
only=false
push=false
colored=true
remove=false
status_=todo
append=false
unset mesage
update=false
show_time=false
append_flag=false
show_numbers=false
# TODO 1585864371: a flag should be a flag as well as an argument taker.
while getopts :ai:m:plocCnturdwh args; do
	case $args in
		(l) list=true;;
		(o) only=true;;
		(p) push=true;;
		(r) remove=true;;
		(u) update=true;;
		(C) colored=false;;
		(h) usage; exit 0;;
		(i) index=$OPTARG;;
		(d) status_="done";;
		(t) show_time=true;;
		(w) status_="winp";;
		(m) message="$OPTARG";;
		(n) show_numbers=true;;
		(c) status_="canceled";;
		(a) append_flag=true; append="$OPTARG";;
	esac
done

# }}}
# Helper Functions {{{1

backup_the_data() {
	bak_date=$(date +%s)
	printf "\n-------- $bak_date --------\n\n" >> $file_bak
	jq . $file_data >> $file_bak
	printf "\n-------- $bak_date --------\n" >> $file_bak
}

index_is_valid() { [ $index -gt -1 ] && true || false; }
type_color() {
	case $1 in
		todo) echo 1;;
		done) echo 6;;
		winp) echo 3;;
		canceled) echo 7;;
		*) echo 150;;
	esac 
}
todo_bg_color(){
	case $1 in
		todo) echo -1;;
		done) echo -1;;
		winp) echo 236;;
		canceled) echo -1;;
		*) echo 100;;
	esac
}
todo_fg_color(){
	case $1 in
		todo) echo 7;;
		done) echo 6;;
		winp) echo 3;;
		canceled) echo 7;;
		*) echo 150;;
	esac
}

show_todo_items() {
	counter_local=$1
	while read type_; do read text; read created; read finished;
		[[ $text = "null" ]] || {
			$only || (
				$show_numbers &&
					printf "$($colored && (tput setaf 7))${counter_local}. "
			)
			tput sgr0;
			$only || (
				$colored && tput setaf $(type_color $type_)
				printf "${type_}: ";
			)
			$colored && (
				tput bold;
				tput setaf $(todo_fg_color $type_);
				tput setab $(todo_bg_color $type_);
			)
			printf "$text";
			tput sgr0;
			$only || (
				$show_time && (
					if [[ $type_ == "done" ]] || [[ $type_ == "canceled" ]]; then
						time_value=$finished; else time_value=$created; fi;
					$colored && tput setaf 11
					printf " $(echo $time_value|fromnow)";
				)
			)
		}
			tput sgr0; echo # new line
			let counter_local--
	done
}

current_item() {
	jq -r \
'(.[]|select(.type=="winp"))|.type,.text,.time.created.value,.time.finished.value' \
	$file_data | show_todo_items 0
	# TODO 1585682868: Get the correct index value using jq when getting winp.
	# TODO 1585737097: If there is no work-in-progress item then show the oldest
	#                  todo. (First In First Out)
}

get_todo_item() {
	local OPTIND OPTARG args
	total_count=$(jq '. | length' $file_data)
	counter=$(($total_count - 1))
	while getopts :li: args; do
		case $args in
			(l) unset id_local;; # list all items.
			(i) id_local=$(($total_count - $OPTARG - 1)); counter=$OPTARG;;
		esac
	done
	jq -r \
"reverse|.[$id_local]|.type,.text,.time.created.value,.time.finished.value" \
		$file_data | show_todo_items $counter
}

# }}}
# Actions {{{1
# Append {{{2

if $append; then
	if [[ $message = "" ]]; then # open an editor.
		backup_the_data
		index_local=$(jq '. | length' $file_data)
		printf "$json_template" "$status_" "TYPE YOUR TEXT HERE" `date +%s` |jq |
			tee $file_tmp_bak $file_tmp_new &>/dev/null;
		$EDITOR $file_tmp_new;
		diff -q $file_tmp_bak $file_tmp_new &>/dev/null;
		if [ $? -eq 1 ]; then
			echo appending the new todo item
		jq -s add $file_data $file_tmp_new > $file_tmp_bak;
		cat $file_tmp_bak > $file_data;
		get_todo_item -i $index_local
		else
			>&2 echo nothing changed
			exit 2
		fi
	else # means: there is a todo item as an argument.
		backup_the_data
		index_local=$(jq '. | length' $file_data)
		jq ". += $(printf "$json_template" "$status_" "$message" `date +%s`)" \
			$file_data > $file_tmp_bak;
		cat $file_tmp_bak > $file_data;
		get_todo_item -i $index_local
	fi

# }}}
# List {{{2

elif $list; then
	if index_is_valid; then
		get_todo_item -i $index
	else
		get_todo_item -l
	fi

# }}}
# Update Item {{{2

elif $update; then
	if index_is_valid; then
		jq ".[$index]" $file_data | tee $file_tmp_bak $file_tmp_new &>/dev/null;
		$EDITOR $file_tmp_new;
		diff -q $file_tmp_bak $file_tmp_new &>/dev/null;
		if [ $? -eq 1 ]; then
			jq ".[$index] |= $(cat $file_tmp_new)" $file_data > $file_tmp_bak
			cat $file_tmp_bak > $file_data;
			get_todo_item -i $index
		else
			>&2 echo nothing changed
			exit 2
		fi
	else # list todo items to show indexes and texts
		get_todo_item -l
	fi

# }}}
# Update Status {{{2

elif [[ $status_ = "winp" ]]; then
	if index_is_valid; then
		backup_the_data
		jq '(.[].type|select(.=="winp"))="todo"' $file_data > $file_tmp_bak
		cat $file_tmp_bak > $file_data;
		jq ".[$index].type = \"winp\"" $file_data > $file_tmp_bak
		cat $file_tmp_bak > $file_data;
		get_todo_item -i $index
	else
		get_todo_item -l
	fi
elif [[ $status_ = "done" ]]; then
	if index_is_valid; then
		backup_the_data
		jq ".[$index].type = \"done\"" $file_data > $file_tmp_bak
		jq ".[$index].time.finished.value = \"`date +%s`\"" $file_tmp_bak > $file_tmp_new
		cat $file_tmp_new > $file_data;
		get_todo_item -i $index
	else
		get_todo_item -l
	fi
elif [[ $status_ = "canceled" ]]; then
	if index_is_valid; then
		backup_the_data
		jq ".[$index].type = \"canceled\"" $file_data > $file_tmp_bak
		jq ".[$index].time.finished.value = \"`date +%s`\"" $file_tmp_bak > $file_tmp_new
		cat $file_tmp_new > $file_data;
		get_todo_item -i $index
	else
		get_todo_item -l
	fi

# }}}
# Remove {{{2

elif $remove; then
	if index_is_valid; then
		backup_the_data
		jq "del(.[$index])" $file_data > $file_tmp_new
		cat $file_tmp_new > $file_data;
		echo item
		get_todo_item -i $index
		# TODO 1585920353: Fix: wrong item appearing when deleted an item.
		echo deleted.
	else # list todo items to show indexes and texts
		get_todo_item -l
	fi

# }}}
# Show Index {{{2

elif index_is_valid; then
	get_todo_item -i $index

# }}}
# Push to GitHub {{{2

elif $push; then
	# TODO 1585487086: Push to github.
	echo pushing...
else
	current_item
fi

# }}}
# }}}

# vim: set foldmethod=marker :
